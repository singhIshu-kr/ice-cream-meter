'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request2 = require('request');

var _request3 = _interopRequireDefault(_request2);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _merge = require('merge');

var _merge2 = _interopRequireDefault(_merge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 *  Treasure Data REST API Client
 *  @author  jwyuan and lewuathe
 *  @license Apache-2.0
 *  @version 0.3.0
 *  @requires request
 *  @requires querystring
 *  @requires merge
 *  @see http://docs.treasuredata.com/articles/rest-api-node-client
 *
 *  @example
 *  var TD = require('td');
 *  var client = new TD('TREASURE_DATA_API_KEY');
 *
 *  var fnPrint = function(err, results) {
 *    console.log(results);
 *  };
 *  client.listDatabase(function(err, results) {
 *    for (var i = 0; i < results.databases.length; i++) {
 *      client.listTables(results.databases[i].name, fnPrint);
 *    }
 *  });
 *
 *  @constructor
 *  @param {string} apikey - The API key available from user account.
 *  @param {object} options - Specify the endpoint of TreasureData api.
 *                            options.host = 'api.treasuredata.com'
 *                            options.protocol = 'http'
 */
var TDClient = function () {
    function TDClient(apikey, options) {
        _classCallCheck(this, TDClient);

        this.options = options || {};
        this.options.apikey = apikey;
        this.options.host = this.options.host || 'api.treasuredata.com';
        this.options.protocol = this.options.protocol || 'http';
        this.options.headers = this.options.headers || {};
        this.baseUrl = this.options.protocol + '://' + this.options.host;
    }

    /**
     *  Return the list of all databases belongs to given account
     *  @param {function} callback - Callback function which receives
     *                               error object and results object
     *  @example
     *  // Results object
     *  {name: 'db1', count: 1, created_at: 'XXX',
     *   updated_at: 'YYY', organization: null,
     *   permission: 'administrator'}
     */


    _createClass(TDClient, [{
        key: 'listDatabases',
        value: function listDatabases(callback) {
            this._request("/v3/database/list", {
                method: 'GET',
                json: true
            }, callback);
        }

        /**
         *  Delete the given named database
         *  @param {string} db - The name of database
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         */

    }, {
        key: 'deleteDatabase',
        value: function deleteDatabase(db, callback) {
            this._request("/v3/database/delete/" + _querystring2.default.escape(db), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         *  Create the given named database
         *  @param {string} db - The name of database
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         */

    }, {
        key: 'createDatabase',
        value: function createDatabase(db, callback) {
            this._request("/v3/database/create/" + _querystring2.default.escape(db), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         *  Return the list of all tables belongs to given database
         *  @param {string} db - The name of database
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         */

    }, {
        key: 'listTables',
        value: function listTables(db, callback) {
            this._request("/v3/table/list/" + _querystring2.default.escape(db), {
                json: true
            }, callback);
        }

        /**
         *  Create log type table in the given database
         *  @param {string} db - The name of database
         *  @param {string} table - The name of table
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         */

    }, {
        key: 'createLogTable',
        value: function createLogTable(db, table, callback) {
            this.createTable(db, table, 'log', callback);
        }

        /**
         *  Create item type table in the given database
         *  @deprecated
         *  @param {string} db - The name of database
         *  @param {string} table - The name of table
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         */

    }, {
        key: 'createItemTable',
        value: function createItemTable(db, table, callback) {
            this.createTable(db, table, 'item', callback);
        }

        /**
         *  Create table in given database
         *  @param {string} db - The name of database
         *  @param {string} table - The name of table
         *  @param {string} type - The type of table ('log' or 'item')
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         */

    }, {
        key: 'createTable',
        value: function createTable(db, table, type, callback) {
            this._request("/v3/table/create/" + _querystring2.default.escape(db) + "/" + _querystring2.default.escape(table) + "/" + _querystring2.default.escape(type), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         *  Swap the content of two tables
         *  @param {string} db - The name of database
         *  @param {string} table1 - The first table
         *  @param {string} table2 - The second table
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         */

    }, {
        key: 'swapTable',
        value: function swapTable(db, table1, table2, callback) {
            this._request("/v3/table/swap/" + _querystring2.default.escape(db) + "/" + _querystring2.default.escape(table1) + "/" + _querystring2.default.escape(table2), {
                method: 'POST',
                json: true
            }, callback);
        }
    }, {
        key: 'updateSchema',
        value: function updateSchema(db, table, schema_json, callback) {
            this._request("/v3/table/update-schema/" + _querystring2.default.escape(db) + "/" + _querystring2.default.escape(table), {
                method: 'POST',
                body: schema_json,
                json: true
            }, callback);
        }
    }, {
        key: 'deleteTable',
        value: function deleteTable(db, table, callback) {
            this._request("/v3/table/delete/" + _querystring2.default.escape(db) + "/" + _querystring2.default.escape(table), {
                method: 'POST',
                json: true
            }, callback);
        }
    }, {
        key: 'tail',
        value: function tail(db, table, count, to, from, callback) {
            if (typeof count === 'function') {
                callback = count;
                count = null;
            } else if (typeof to === 'function') {
                callback = to;
                to = null;
            } else if (typeof from === 'function') {
                callback = from;
                from = null;
            }

            var params = {
                // format: 'msgpack'
            };
            if (count) {
                params.count = count;
            }
            if (to) {
                params.to = to;
            }
            if (from) {
                params.from = from;
            }

            this._request("/v3/table/tail/" + _querystring2.default.escape(db) + "/" + _querystring2.default.escape(table), {
                method: 'GET',
                qs: params
            }, callback);
        }

        /**
         *  Return the list of all jobs run by your account
         *  @param {string} from - The start of the range of list
         *  @param {string} to - The end of the range of list
         *  @param {string} status - The status of returned jobs
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         *
         */

    }, {
        key: 'listJobs',
        value: function listJobs(from, to, status, conditions, callback) {
            if (typeof from === 'function') {
                callback = from;
                from = 0;
            } else if (typeof to === 'function') {
                callback = to;
                to = null;
            } else if (typeof status === 'function') {
                callback = status;
                status = null;
            } else if (typeof conditions === 'function') {
                callback = conditions;
                conditions = null;
            }

            var params = {
                from: from
            };
            if (to) {
                params.to = to;
            }
            if (status) {
                params.status = status;
            }
            if (conditions) {
                params.conditions = conditions;
            }

            this._request("/v3/job/list/", {
                qs: params,
                json: true
            }, callback);
        }

        /**
         *  Returns the status and logs of a given job
         *  @param {string} job_id - The job id
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         *
         */

    }, {
        key: 'showJob',
        value: function showJob(job_id, callback) {
            this._request("/v3/job/show/" + _querystring2.default.escape(job_id), {
                json: true
            }, callback);
        }

        /**
         *  Returns the result of a specific job.
         *  @param {string} job_id - The job id
         *  @param {string} format - Format to receive data back in, defaults
         *                           to tsv
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         */

    }, {
        key: 'jobResult',
        value: function jobResult(job_id, format, callback) {
            var opts = {
                method: 'GET',
                qs: { format: 'tsv' }
            };

            if (typeof format === 'function') {
                callback = format;
            } else {
                opts.qs.format = format;
            }

            this._request("/v3/job/result/" + _querystring2.default.escape(job_id), opts, callback);
        }

        /**
         *  Kill the currently running job
         *  @param {string} job_id - the job id
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         */

    }, {
        key: 'kill',
        value: function kill(job_id, callback) {
            this._request("/v3/job/kill/" + _querystring2.default.escape(job_id), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         *  Submit Hive type job
         *  @param {string} db - The name of database
         *  @param {string} query - The Hive query which run on given database
         *  @param {object} opts - Supported options are `result`,
         *                         `priority` and `retry_limit`
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         *
         *  @see {@link https://docs.treasuredata.com/categories/hive}
         */

    }, {
        key: 'hiveQuery',
        value: function hiveQuery(db, query, opts, callback) {
            if (typeof opts === 'function') {
                callback = opts;
                opts = {};
            }
            this._query(db, 'hive', query, opts, callback);
        }

        /**
          *  Submit Presto type job
          *  @param {string} db - The name of database
          *  @param {string} query - The Presto query which run on given database
          *  @param {object} opts - Supported options are `result`,
          *                         `priority` and `retry_limit`
          *  @param {function} callback - Callback function which receives
          *                               error object and results object
          *
          *  @see {@link https://docs.treasuredata.com/categories/presto}
          */

    }, {
        key: 'prestoQuery',
        value: function prestoQuery(db, query, opts, callback) {
            if (typeof opts === 'function') {
                callback = opts;
                opts = {};
            }
            this._query(db, 'presto', query, opts, callback);
        }

        // Export API

    }, {
        key: 'export',
        value: function _export(db, table, storage_type, opts, callback) {
            if (typeof opts === 'function') {
                callback = opts;
                opts = {};
            }
            opts.storage_type = storage_type;

            this._request("/v3/export/run/" + _querystring2.default.escape(db) + "/" + _querystring2.default.escape(table), {
                method: 'POST',
                body: opts,
                json: true
            }, callback);
        }

        /**
         *  Create scheduled job
         *
         *  @param {string} name - The name of scheduled job
         *  @param {object} opts - Supported options are `cron` and `query`.
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         *  @see {@link https://docs.treasuredata.com/categories/scheduled-job}
         *
         */

    }, {
        key: 'createSchedule',
        value: function createSchedule(name, opts, callback) {
            if (!opts.cron || !opts.query) {
                return callback(new Error('opts.cron and opts.query is required!'), {});
            }
            opts.type = 'hive';
            this._request("/v3/schedule/create/" + _querystring2.default.escape(name), {
                method: 'POST',
                body: opts,
                json: true
            }, callback);
        }

        /**
         *  Delete scheduled job
         *
         *  @param {string} name - The name of scheduled job
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         *  @see {@link https://docs.treasuredata.com/categories/scheduled-job}
         *
         */

    }, {
        key: 'deleteSchedule',
        value: function deleteSchedule(name, callback) {
            this._request("/v3/schedule/delete/" + _querystring2.default.escape(name), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         *  Show the list of scheduled jobs
         *
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         *  @see {@link https://docs.treasuredata.com/categories/scheduled-job}
         *
         */

    }, {
        key: 'listSchedules',
        value: function listSchedules(callback) {
            this._request("/v3/schedule/list", {
                method: 'GET',
                json: true
            }, callback);
        }

        /**
         *  Update the scheduled job
         *
         *  @param {string} name - The name of scheduled job
         *  @param {object} params - Updated content
         *  @param {function} callback - Callback function which receives
         *                               error object and results object
         *  @see {@link https://docs.treasuredata.com/categories/scheduled-job}
         */

    }, {
        key: 'updateSchedule',
        value: function updateSchedule(name, params, callback) {
            this._request("/v3/schedule/update/" + _querystring2.default.escape(name), {
                body: params,
                method: 'POST',
                json: true
            }, callback);
        }
    }, {
        key: 'history',
        value: function history(name, from, to, callback) {
            if (typeof from === 'function') {
                callback = from;
                from = 0;
            } else if (typeof from === 'function') {
                callback = to;
                to = null;
            }
            var params = {};
            if (from) {
                params.from = from;
            }
            if (to) {
                params.to = to;
            }

            this._request("/v3/schedule/history/" + _querystring2.default.escape(name), {
                method: 'GET',
                qs: params,
                json: true
            }, callback);
        }
    }, {
        key: 'runSchedule',
        value: function runSchedule(name, time, num, callback) {
            if (typeof num === 'function') {
                callback = num;
                num = null;
            }

            var params = {};
            if (num) {
                params.num = num;
            }

            this._request("/v3/schedule/run/" + _querystring2.default.escape(name) + "/" + _querystring2.default.escape(time), {
                method: 'POST',
                qs: params,
                json: true
            }, callback);
        }

        // Import API

    }, {
        key: 'import',
        value: function _import(db, table, format, stream, size, unique_id, callback) {
            if (typeof unique_id === 'function') {
                callback = unique_id;
                unique_id = null;
            }

            var path = void 0;
            if (unique_id) {
                path = "/v3/table/import_with_id/" + _querystring2.default.escape(db) + "/" + _querystring2.default.escape(table) + "/" + _querystring2.default.escape(unique_id) + "/" + _querystring2.default.escape(format);
            } else {
                path = "/v3/table/import/" + _querystring2.default.escape(db) + "/" + _querystring2.default.escape(table) + "/" + _querystring2.default.escape(format);
            }

            this._put(path, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/octet-stream',
                    'Content-Length': size
                }
            }, stream, callback);
        }

        // Result API

    }, {
        key: 'listResult',
        value: function listResult(callback) {
            this._request("/v3/result/list", {
                json: true
            }, callback);
        }
    }, {
        key: 'createResult',
        value: function createResult(name, url, callback) {
            this._request("/v3/result/create/" + _querystring2.default.escape(name), {
                method: 'POST',
                body: { 'url': url },
                json: true
            }, callback);
        }
    }, {
        key: 'deleteResult',
        value: function deleteResult(name, url, callback) {
            this._request("/v3/result/delete/" + _querystring2.default.escape(name), {
                method: 'POST',
                body: { 'url': url },
                json: true
            }, callback);
        }

        // Server Status API

    }, {
        key: 'serverStatus',
        value: function serverStatus(callback) {
            this._request("/v3/system/server_status", {
                json: true
            }, callback);
        }

        // Bulk import APIs

        /**
         * Create bulk import session
         * @param {string} name - The session name
         * @param {string } db - Database name where data is imported
         * @param {string } table - Table name where data is imported
         * @param {function} callback - Callback function which receives
         *                              error object and results object
         * @see {@link https://docs.treasuredata.com/articles/bulk-import}
         */

    }, {
        key: 'createBulkImport',
        value: function createBulkImport(name, db, table, callback) {
            this._request('/v3/bulk_import/create/' + _querystring2.default.escape(name) + '/' + _querystring2.default.escape(db) + '/' + _querystring2.default.escape(table), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         * Delete bulk import session
         * @param {string} name - The session name
         * @param {function} callback - Callback function which receives
         *                              error object and results object
         * @see {@link https://docs.treasuredata.com/articles/bulk-import}
         */

    }, {
        key: 'deleteBulkImport',
        value: function deleteBulkImport(name, callback) {
            this._request('/v3/bulk_import/delete/' + _querystring2.default.escape(name), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         * Show the information about specified bulk import session
         * @param {string} name - The session name
         * @param {function} callback - Callback function which receives
         *                              error object and results object
         * @see {@link https://docs.treasuredata.com/articles/bulk-import}
         */

    }, {
        key: 'showBulkImport',
        value: function showBulkImport(name, callback) {
            this._request('/v3/bulk_import/show/' + _querystring2.default.escape(name), {
                method: 'GET',
                json: true
            }, callback);
        }

        /**
         * Show the list of all bulk import sessions
         * @param {function} callback - Callback function which receives
         *                              error object and results object
         * @see {@link https://docs.treasuredata.com/articles/bulk-import}
         */

    }, {
        key: 'listBulkImports',
        value: function listBulkImports(callback) {
            this._request('/v3/bulk_import/list', {
                method: 'GET',
                json: true
            }, callback);
        }

        /**
         * Show the list of all partitions of specified bulk import session
         * @param {function} callback - Callback function which receives
         *                              error object and results object
         * @see {@link https://docs.treasuredata.com/articles/bulk-import}
         */

    }, {
        key: 'listBulkImportParts',
        value: function listBulkImportParts(name, callback) {
            this._request('/v3/bulk_import/list_parts/' + _querystring2.default.escape(name), {
                method: 'GET',
                json: true
            }, callback);
        }

        /**
         * Upload a partition file for the specified bulk import session
         * @param {string} name - The bulk import session name
         * @param {string} partName - The partition name
         * @param {stream.Readable} stream - Readable stream that reads partition file
         * @param {function} callback - Callback function which receives
         *                              error object and results object
         * @see {@link https://docs.treasuredata.com/articles/bulk-import}
         * @example
         * var stream = fs.createReadStream('part_file.msgpack.gz');
         * client.bulkImportUploadPart('bulk_import_session', 'part1', stream, function(err, results) {
         *   // Obtain bulk import uploading result
         * });
         */

    }, {
        key: 'bulkImportUploadPart',
        value: function bulkImportUploadPart(name, partName, stream, callback) {
            this._put('/v3/bulk_import/upload_part/' + _querystring2.default.escape(name) + '/' + _querystring2.default.escape(partName), { json: true }, stream, callback);
        }

        /**
         * Delete specified partition from given bulk import session
         * @param {string} name - The bulk import session name
         * @param {string} partName - The partition name
         * @param {function} callback - Callback function which receives
         *                              error object and results object
         * @see {@link https://docs.treasuredata.com/articles/bulk-import}
         */

    }, {
        key: 'bulkImportDeletePart',
        value: function bulkImportDeletePart(name, partName, callback) {
            this._request('/v3/bulk_import/delete_part/' + _querystring2.default.escape(name) + '/' + _querystring2.default.escape(partName), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         * Run the job for processing partition files inside Treasure Data service
         * @param {string} name - The bulk import session name
         * @param callback - Callback function which receives
         *                              error object and results object
         * @see {@link https://docs.treasuredata.com/articles/bulk-import}
         */

    }, {
        key: 'performBulkImport',
        value: function performBulkImport(name, callback) {
            this._request('/v3/bulk_import/perform/' + _querystring2.default.escape(name), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         * Confirm the bulk import session is finished successfully
         * @param {string} name - The bulk import session name
         * @param callback - Callback function which receives
         *                              error object and results object
         * @see {@link https://docs.treasuredata.com/articles/bulk-import}
         */

    }, {
        key: 'commitBulkImport',
        value: function commitBulkImport(name, callback) {
            this._request('/v3/bulk_import/commit/' + _querystring2.default.escape(name), {
                method: 'POST',
                json: true
            }, callback);
        }

        /**
         * _query: Protected method
         * @protected
         */

    }, {
        key: '_query',
        value: function _query(db, query_type, q, opts, callback) {
            opts.query = q;

            this._request("/v3/job/issue/" + query_type + "/" + _querystring2.default.escape(db), {
                method: 'POST',
                body: opts,
                json: true
            }, callback);
        }

        /**
         * _request: Protected method
         * @protected
         */

    }, {
        key: '_request',
        value: function _request(path, options, callback) {
            if (typeof options === 'function') {
                callback = options;
                options = {};
            }
            options.uri = this.baseUrl + path;
            options.headers = { 'Authorization': 'TD1 ' + this.options.apikey };
            // Merge custom headers
            options.headers = (0, _merge2.default)(options.headers, this.options.headers);

            callback = callback;

            (0, _request3.default)(options, function (err, res, body) {
                if (err) {
                    return callback(err, undefined);
                }

                if (res.statusCode < 200 || res.statusCode > 299) {
                    return callback(new Error(body && body.error || 'HTTP ' + res.statusCode), body || {});
                }

                callback(null, body || {});
            });
        }

        /**
         *  _put: Protected method
         *  @protected
         */

    }, {
        key: '_put',
        value: function _put(path, options, stream, callback) {
            options.uri = this.baseUrl + path;
            options.headers = { 'Authorization': 'TD1 ' + this.options.apikey };

            stream.pipe(_request3.default.put(options, function (err, res, body) {
                if (err) {
                    return callback(err, undefined);
                }
                if (res.statusCode < 200 || res.statusCode > 299) {
                    return callback(new Error(body && body.error || 'HTTP ' + res.statusCode), body || {});
                }

                callback(null, body || {});
            }));
        }
    }]);

    return TDClient;
}();

exports.default = TDClient;
module.exports = exports['default'];